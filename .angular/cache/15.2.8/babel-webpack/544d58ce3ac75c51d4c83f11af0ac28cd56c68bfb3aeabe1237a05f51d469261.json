{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class UserService {\n  constructor() {\n    this.userList = [{\n      id: 1,\n      name: 'User1',\n      status: false\n    }, {\n      id: 2,\n      name: 'User2',\n      status: false\n    }, {\n      id: 3,\n      name: 'User3',\n      status: true\n    }, {\n      id: 4,\n      name: 'User4',\n      status: false\n    }, {\n      id: 5,\n      name: 'User5',\n      status: true\n    }];\n  }\n  changeStatus(user) {\n    this.userList.find(item => {\n      if (item.id == user.id) {\n        item.status = !user.status;\n      }\n    });\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)();\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,WAAW;EAUtBC;IARA,aAAQ,GAAG,CACT;MAACC,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAK,CAAC,EACrC;MAACF,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAK,CAAC,EACrC;MAACF,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAI,CAAC,EACpC;MAACF,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAK,CAAC,EACrC;MAACF,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAI,CAAC,CACrC;EAEe;EAEhBC,YAAY,CAACC,IAAQ;IACnB,IAAI,CAACC,QAAQ,CAACC,IAAI,CAAEC,IAAI,IAAI;MAC1B,IAAGA,IAAI,CAACP,EAAE,IAAII,IAAI,CAACJ,EAAE,EAAC;QACpBO,IAAI,CAACL,MAAM,GAAG,CAACE,IAAI,CAACF,MAAM;;IAE9B,CAAC,CAAC;EAGJ;;AApBWJ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAU,SAAXV,WAAW;EAAAW,YAFV;AAAM","names":["UserService","constructor","id","name","status","changeStatus","user","userList","find","item","factory","providedIn"],"sourceRoot":"","sources":["I:\\Learn\\angular-all-topics\\src\\app\\_services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  userList = [\n    {id: 1, name: 'User1', status: false},\n    {id: 2, name: 'User2', status: false},\n    {id: 3, name: 'User3', status: true},\n    {id: 4, name: 'User4', status: false},\n    {id: 5, name: 'User5', status: true},\n  ]\n\n  constructor() { }\n\n  changeStatus(user:any){     \n    this.userList.find((item) => {\n      if(item.id == user.id){\n        item.status = !user.status\n      }\n    })\n\n\n  }\n\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}